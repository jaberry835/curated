from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi
from fastapi.responses import HTMLResponse
import json

def custom_openapi(app: FastAPI):
    """Generate custom OpenAPI schema"""
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title="Fictional Information API",
        version="1.0.0",
        description="""
        ## Fictional Information API
        
        This API provides fictional information about companies and IP addresses using Azure OpenAI GPT-4.
        
        ### Features:
        - **IP to Company**: Get fictional company information for any IP address
        - **Company Devices**: Get fictional device information for any company
        - **Company Summary**: Get comprehensive fictional company summaries
        
        ### Important Notes:
        - All information returned is **fictional** and generated by AI
        - All companies are located **outside the United States**
        - IP addresses and device information are **not real**
        - Use this API for testing, development, or educational purposes only
        
        ### Authentication:
        This API uses Azure OpenAI with managed identity authentication for secure access.
        """,
        routes=app.routes,
        servers=[
            {"url": "http://localhost:8000", "description": "Local development server"},
            {"url": "https://your-api-domain.com", "description": "Production server"}
        ]
    )
    
    # Add custom tags
    openapi_schema["tags"] = [
        {
            "name": "Health",
            "description": "Health check and status endpoints"
        },
        {
            "name": "IP Information",
            "description": "Get fictional company information based on IP addresses"
        },
        {
            "name": "Company Devices",
            "description": "Get fictional device information for companies"
        },
        {
            "name": "Company Summary",
            "description": "Get comprehensive fictional company information"
        }
    ]
    
    # Add security schemes
    openapi_schema["components"]["securitySchemes"] = {
        "ApiKeyAuth": {
            "type": "apiKey",
            "in": "header",
            "name": "X-API-Key"
        }
    }
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

def add_swagger_ui_tags(app: FastAPI):
    """Add tags to endpoints for better Swagger UI organization"""
    
    # Add tags to endpoints
    for route in app.routes:
        if hasattr(route, 'endpoint') and hasattr(route.endpoint, '__name__'):
            endpoint_name = route.endpoint.__name__
            
            if 'health' in endpoint_name.lower():
                route.tags = ["Health"]
            elif 'ip_company' in endpoint_name.lower():
                route.tags = ["IP Information"]
            elif 'company_devices' in endpoint_name.lower():
                route.tags = ["Company Devices"]
            elif 'company_summary' in endpoint_name.lower():
                route.tags = ["Company Summary"]

def setup_swagger_ui(app: FastAPI):
    """Setup custom Swagger UI configuration"""
    
    # Add custom OpenAPI schema
    app.openapi = lambda: custom_openapi(app)
    
    # Add tags to endpoints
    add_swagger_ui_tags(app)
    
    # Custom Swagger UI HTML
    swagger_ui_html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Fictional Information API - Documentation</title>
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui.css" />
        <style>
            .swagger-ui .topbar { display: none; }
            .swagger-ui .info { margin: 20px 0; }
            .swagger-ui .info h1 { color: #3b82f6; }
        </style>
    </head>
    <body>
        <div id="swagger-ui"></div>
        <script src="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-bundle.js"></script>
        <script>
            const ui = SwaggerUIBundle({
                url: '/openapi.json',
                dom_id: '#swagger-ui',
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIBundle.presets.standalone
                ],
                plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "BaseLayout",
                deepLinking: true,
                showExtensions: true,
                showCommonExtensions: true,
                tryItOutEnabled: true,
                requestInterceptor: (request) => {
                    console.log('Request:', request);
                    return request;
                },
                responseInterceptor: (response) => {
                    console.log('Response:', response);
                    return response;
                }
            });
        </script>
    </body>
    </html>
    """
    
    @app.get("/docs", include_in_schema=False)
    async def custom_swagger_ui():
        return HTMLResponse(swagger_ui_html)
    
    return app
